{"name": "test_1[data2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <function Assert.asert_contrast at 0x000001A856FD5D30>(data='{\"count\": \"@select username from tb_users where id = 11@\", \"errmsg\": \"ok\"}', result_code=200, result_data='{\"code\": 200, \"count\": 1, \"errmsg\": \"ok\"}')\n +    where <function Assert.asert_contrast at 0x000001A856FD5D30> = Assert.asert_contrast\n +    and   '{\"count\": \"@select username from tb_users where id = 11@\", \"errmsg\": \"ok\"}' = handleExcelJson('{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}')\n +      where '{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}' = str('{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}')\n +    and   200 = <Response [200]>.status_code\n +    and   '{\"code\": 200, \"count\": 1, \"errmsg\": \"ok\"}' = dictToString({'code': 200, 'count': 1, 'errmsg': 'ok'})\n +      where {'code': 200, 'count': 1, 'errmsg': 'ok'} = <bound method Response.json of <Response [200]>>()\n +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <test_case.test_demo.TestClass object at 0x000001A85702A070>\ndata = ['case_003', '查询用户', '查询是否存在用户', 'GET', 'count', '{\"username\": \"wrfwrf\"}', ...]\n\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"data\", execute_data)\n    def test_1(self, data):\n        \"\"\"编写测试用例\"\"\"\n        if data[3] == 'GET':\n            jsondict = getDict(data[5])\n            for key, value in jsondict.items():\n                if match_param(str(value)):\n                    a, b = match_param(str(value))\n                    jsondict[key] = str(extract_with_jsonpath(\n                        global_instance.res_save_dict[a], b))\n                if match_sql(value):\n                    c = match_sql(value)\n                    jsondict[key] = OperationDb().query(c)\n                json_str = json.dumps(jsondict)\n                data[5] = json_str\n            res = ApiRequest.send_requests(\n                method=data[3], url=data[4], params=data[5])\n            # print(res.status_code)\n            if data[7] == 'Y':\n                global_instance.res_save_dict[data[0]] = dictToString(\n                    res.json())\n>           assert Assert.asert_contrast(\n                data=handleExcelJson(str(\n                    data[6])),\n                result_code=res.status_code,\n                result_data=dictToString(res.json()))\nE           assert False\nE            +  where False = <function Assert.asert_contrast at 0x000001A856FD5D30>(data='{\"count\": \"@select username from tb_users where id = 11@\", \"errmsg\": \"ok\"}', result_code=200, result_data='{\"code\": 200, \"count\": 1, \"errmsg\": \"ok\"}')\nE            +    where <function Assert.asert_contrast at 0x000001A856FD5D30> = Assert.asert_contrast\nE            +    and   '{\"count\": \"@select username from tb_users where id = 11@\", \"errmsg\": \"ok\"}' = handleExcelJson('{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}')\nE            +      where '{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}' = str('{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}')\nE            +    and   200 = <Response [200]>.status_code\nE            +    and   '{\"code\": 200, \"count\": 1, \"errmsg\": \"ok\"}' = dictToString({'code': 200, 'count': 1, 'errmsg': 'ok'})\nE            +      where {'code': 200, 'count': 1, 'errmsg': 'ok'} = <bound method Response.json of <Response [200]>>()\nE            +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntest_case\\test_demo.py:58: AssertionError"}, "description": "编写测试用例", "attachments": [{"name": "log", "source": "0fffbd06-3d7c-4f38-b42f-4481073430eb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "['case_003', '查询用户', '查询是否存在用户', 'GET', 'count', '{\"username\": \"@select username from tb_users where id = 11@\"}', '{\\n    \"count\": \"@select username from tb_users where id = 11@\",\\n    \"errmsg\": \"ok\"\\n}', 'N']"}], "start": 1724058990075, "stop": 1724058990828, "uuid": "ce1a0609-c797-462b-9791-c463cce27f67", "historyId": "de75972b7dcdfb23b84303ef589640a2", "testCaseId": "83f16d071edcc9a500d2ef1972caf11f", "fullName": "test_case.test_demo.TestClass#test_1", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "DESKTOP-G38TPIG"}, {"name": "thread", "value": "22040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_demo"}]}