{"name": "test_1[data1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <function Assert.asert_contrast at 0x000001A856FD5D30>(data='{\"errmsg\": \"&case_001.errmsg&\"}', result_code=200, result_data='{\"code\": 400, \"errmsg\": \"登录失败，账号或密码错误\"}')\n +    where <function Assert.asert_contrast at 0x000001A856FD5D30> = Assert.asert_contrast\n +    and   '{\"errmsg\": \"&case_001.errmsg&\"}' = handleExcelJson('{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}')\n +      where '{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}' = str('{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}')\n +    and   200 = <Response [200]>.status_code\n +    and   '{\"code\": 400, \"errmsg\": \"登录失败，账号或密码错误\"}' = dictToString({'code': 400, 'errmsg': '登录失败，账号或密码错误'})\n +      where {'code': 400, 'errmsg': '登录失败，账号或密码错误'} = <bound method Response.json of <Response [200]>>()\n +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <test_case.test_demo.TestClass object at 0x000001A85702AD90>\ndata = ['case_002', '登录', '登录用户', 'POST', 'login', '{\"username\": \"11\", \"password\": \"11\", \"password2\": \"wrfwrf\"}', ...]\n\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"data\", execute_data)\n    def test_1(self, data):\n        \"\"\"编写测试用例\"\"\"\n        if data[3] == 'GET':\n            jsondict = getDict(data[5])\n            for key, value in jsondict.items():\n                if match_param(str(value)):\n                    a, b = match_param(str(value))\n                    jsondict[key] = str(extract_with_jsonpath(\n                        global_instance.res_save_dict[a], b))\n                if match_sql(value):\n                    c = match_sql(value)\n                    jsondict[key] = OperationDb().query(c)\n                json_str = json.dumps(jsondict)\n                data[5] = json_str\n            res = ApiRequest.send_requests(\n                method=data[3], url=data[4], params=data[5])\n            # print(res.status_code)\n            if data[7] == 'Y':\n                global_instance.res_save_dict[data[0]] = dictToString(\n                    res.json())\n            assert Assert.asert_contrast(\n                data=handleExcelJson(str(\n                    data[6])),\n                result_code=res.status_code,\n                result_data=dictToString(res.json()))\n        else:\n            jsondict = getDict(data[5])\n            for key, value in jsondict.items():\n                if match_param(str(value)):\n                    a, b = match_param(str(value))\n                    jsondict[key] = str(extract_with_jsonpath(\n                        global_instance.res_save_dict[a], b))\n                if match_sql(value):\n                    c = match_sql(value)\n                    jsondict[key] = OperationDb().query(c)\n                json_str = json.dumps(jsondict)\n                data[5] = json_str\n            res = ApiRequest.send_requests(\n                method=data[3], url=data[4], data=data[5])\n            if data[7] == 'Y':\n                global_instance.res_save_dict[data[0]] = dictToString(\n                    res.json())\n            # print(res.status_code)\n>           assert Assert.asert_contrast(\n                data=handleExcelJson(str(\n                    data[6])),\n                result_code=res.status_code,\n                result_data=dictToString(res.json()))\nE           assert False\nE            +  where False = <function Assert.asert_contrast at 0x000001A856FD5D30>(data='{\"errmsg\": \"&case_001.errmsg&\"}', result_code=200, result_data='{\"code\": 400, \"errmsg\": \"登录失败，账号或密码错误\"}')\nE            +    where <function Assert.asert_contrast at 0x000001A856FD5D30> = Assert.asert_contrast\nE            +    and   '{\"errmsg\": \"&case_001.errmsg&\"}' = handleExcelJson('{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}')\nE            +      where '{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}' = str('{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}')\nE            +    and   200 = <Response [200]>.status_code\nE            +    and   '{\"code\": 400, \"errmsg\": \"登录失败，账号或密码错误\"}' = dictToString({'code': 400, 'errmsg': '登录失败，账号或密码错误'})\nE            +      where {'code': 400, 'errmsg': '登录失败，账号或密码错误'} = <bound method Response.json of <Response [200]>>()\nE            +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntest_case\\test_demo.py:81: AssertionError"}, "description": "编写测试用例", "attachments": [{"name": "log", "source": "91a2236d-0cfb-4c78-bc9c-184915be6738-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "['case_002', '登录', '登录用户', 'POST', 'login', '{\"username\": \"&case_001.code&\", \"password\": \"&case_001.code&\", \"password2\": \"@select username from tb_users where id = 11@\"}', '{\\n    \"errmsg\": \"&case_001.errmsg&\"\\n}', 'N']"}], "start": 1724058989483, "stop": 1724058989934, "uuid": "9a9dcd4b-8dbb-45db-85cd-584085f23fd7", "historyId": "0c0ce39de18c03095f0f8e879d4a89ae", "testCaseId": "83f16d071edcc9a500d2ef1972caf11f", "fullName": "test_case.test_demo.TestClass#test_1", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "DESKTOP-G38TPIG"}, {"name": "thread", "value": "22040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_demo"}]}